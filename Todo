- New todo
x Implemented
* Rejected

! Important
? Dunno
--------------------------------------------------------------------------------
- AppState plugins interface
  - plugin_initialize
  - plugin_cleanup

- Apstate singleton change from Class::Singleton to MooseX::Singleton

- Change of error code into a form like <severity code letter>_<code name>
  instead of <type letter>_<module tag>_<code name>.
  x AppState::Plugins::NodeTree::NodeDOM

- Log.pm
  x Log4perl will not split logfile when larger than some size, bug?
  x Turning on/off several types of log output (stderr, file, email).
  - Wrap messages has problems with '=' on last unbreakable word.
    Remove wrapping?
  x Is it necessary to have forced logging. If message is important then the
    severity should be set higher.
  x Remove do_append_log(). It is possible to set it with
    start_file_logging({mode => 'append'}). (or 'write').
  x Remove do_flush_log(). It is possible to set it with
    start_file_logging({autoflush => 1}). (or 0).
  x Remove log_file_size(). It is possible to set it with
    start_file_logging({size => ###}).
  x Remove nbr_log_files(). It is possible to set it with
    start_file_logging({max => ###}).
  - Add ALL and OFF to the set of codes in Constants. This is to be used to
    set the logging level together with the severity codes like M_ERROR. Then
    the functions stop_*_logging() can be removed.
  - Perhaps change the set of functions *_log_level() into
    log_level( {file => log_level, package => some_package}) as a step
    to generalize the several loggers using codes instead of fuxed functions.
  x Remove M_WARNING constant. Use only WARN. remove is_warning() too.

- Memcached tests with better skip clause

- Merge Constants.pm and Meta_Constants.pm

x Moved Modules from AppState/Ext, AppState/NodeTree and 
  AppState/Plugins/Configdriver to the proper places.

* Replace or extend AppState::PluginManager with Module::Pluggable
  Won't do this because.
    1) plugins are all instanciated, not one particularly.
    2) plugins are search again when use'd (controllable though)
    3) plugins are not remembered. Each call to plugins() gives new addresses

x Store !perl/xxxxx objects in a node. Can be done by the caller at process()
  time when NodeTree builds the tree (use $node->set_object(key => $self)).
  Later when traversing the tree a test can be done on a node to see if there
  are objects stored. When there are, a method in the object can be called.
  Depending on the type of traversal these can be;
  C_NT_DEPTHFIRST1:
    handler_up()

  C_NT_DEPTHFIRST2:
    handler_up()
    handler_down()
    handler_end()

  C_NT_BREADTHFIRST1:
    handler()

  C_NT_BREADTHFIRST2:
    handler()

x Xpath method modify for absolute path adding /R on front when missing


