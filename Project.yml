---
Application:
 name: AppState
 abstract: Framework to provide basic utilities to a program
 licenses:
  - Perl_5
 copyright: 2013 - 2014

 author:
  name: Marcel Timmerman
  email: mt1957@gmail.com

 notes:
  - http://www.perlfoundation.org/cpan_licensing_guidelines

 documentation:
  - README

#-------------------------------------------------------------------------------
# Bugs to repair, use version of AppState.
# Format of version: Release . ChangeCount . BugfixCount
# BugfixCount is reset on Release upgrade.
#
Bugs:
 2014 02 24:
  - &bi1
    issue:
     version: 0.3.12
     priority: 1
     description: >
      Logfile shows empty lines after printing '--[Message repeated]--'.
    fix:
     date: 2014 02 24
     description: >
      In Log.pm Text::Wrap::wrap() was called on an empty message. Added
      an if to prevent log.
     modules/programs: [Log.pm]

 2014 03 11:
  - &bi2
    issue:
     version: 0.4.13
     priority: 8
     description: >
      Overwriting existing plugins found before when search_plugins() and
      set_plugins() are called a second time.
    fix:
     date: 2014 03 11
     description: >
      search_plugins() and set_plugins() modified to prevent overwriting existing
      plugins found before.
     modules/programs: [PluginManager.pm]

 2014 03 18:
  - issue:
     version: 0.4.14
     priority: 5
     description: >
      The log entry:

      =IO 0171 wf File /home/marcel/.buildBuilder/config.yml not readable or not
      existent

      should not be a failure(wf) because a configfile can be non-existent the
      very  first time.


#-------------------------------------------------------------------------------
# What needs to be added changed and removed (+ on front means DONE! :-b )
#
Todo:
 Build.PL:
  - Autofill Build.PL with dependencies.
 Distribution:
  - Generate several items from this Project.yml file:
     - Changes using CPAN::Changes
     - Todo Items
     - Bugs Items
     - Build.PL
     - Readme file
 Miscelleneous:
  - Bring the lot under Git version control and on github
  - Pod and code coverage tests
  - of CPAN::Changes
  - of CPAN::Meta::Spec
  - remove 'no moose' at the end of modules and replace with 'use namespace::autoclean'
 Modules for Process:
  - ZeroMQ
 Modules for ConfigFile:
  - modified Data::Serializer
  - Cache::AgainstFile
 Plugins:
  - Define interface for plugins
 Tests:
  - + Tests which do not determine the workings of a module must be renamed to .xt
  - + Install perlbrew to test with lower versions of perl
  - Generate test reports using:
     - + App::Prove
     - + Perl::Critic
     - sloccount

#-------------------------------------------------------------------------------
# What is changed, use version of AppState. See Bugs for format.
#
Changes:
 2014 01 10:
  - version: 0.2.12
    description: |
     Removal of clone() from all ConfigDriver plugins. Create clone(),
     cloneDocuments() and cloneDocument() to AppState::Ext::ConfigFile module.

 2014 01 15:
  - version: 0.3.12
    description: |
     Change the way how constants are defined using const() from module
     AppState::Ext::Constants. All modules must inherit from this one to
     define their own constants in addition to the few delivered in that nodule.

     logInit() and _log() are defined in Constants module. Appstate has no
     write() or logInit() anymore. These few changes have impact on almost
     all other modules. Before I used to use '$self->meta->make_immutable;'
     but I got problems when inheriting the module. It would make the whole
     object immutable while the inheriting module still needed to modify
     things. So the __PACKAGE__ use was changed back.

     Example code;

     use Moose;
     ...
     extends qw( Class::Singleton AppState::Ext::Constants);
     ...
     sub BUILD
     {
       my($self) = @_;
       ...
       if( $self->meta->is_mutable )
       {
	 $self->const( 'C_APP_UNLINKTEMP', 1, qw( M_SUCCESS M_F_INFO));

	 __PACKAGE__->meta->make_immutable;
       }

       return;
     }

     Of cource other ways are possible like so;

     my %_c_Attr = (is => 'ro', init_arg => undef, lazy => 1);
     has M_ALL => ( default => 0xFFFFFFFF, %_c_Attr);

 2014 02 24:
  - version: 0.3.13
    description: *bi1

 2014 02 28:
  - version: 0.4.13
    description: |
     Added usersUsage and examples arguments to the initialize() method in module
     AppState::Plugins::Feature::CommandLine to be added to the help message.

 2014 03 11:
  - version: 0.4.14
    module: PluginManager 0.1.6
    description: *bi2

#-------------------------------------------------------------------------------
# Scrutinize tests
#
Tests:
 - module: 'AppState::Ext::Constants'
   constructor: new
   test-programs:
    - t/005-Constants.t

 - module: AppState
   constructor: instance
   test-programs:
    - t/010-AppState.t
    - t/011-AppState.t

 - module: AppState::Plugins::Feature::Log
   constructor: new
   test-programs:
    - t/100-Log.t

 - module: AppState::Ext::ConfigIO
   constructor: new
   test-programs:
    - t/300-ConfigIO.t

 - module: AppState::Plugins::ConfigDriver::Yaml
   constructor: new
   test-programs:
    - t/305-Yaml.t

 - module: AppState::Plugins::ConfigDriver::Memcached
   constructor: new
   test-programs:
    - t/306-Memcached.t

 - module: AppState::Plugins::ConfigDriver::Storable
   constructor: new
   test-programs:
    - t/307-Storable.t

 - module: AppState::Plugins::ConfigDriver::DataDumper
   constructor: new
   test-programs:
    - t/308-DataDumper.t

 - module: AppState::Plugins::ConfigDriver::Json
   constructor: new
   test-programs:
    - t/309-Json.t

 - module: AppState::Plugins::ConfigDriver::FreezeThaw
   constructor: new
   test-programs:
    - t/310-FreezeThaw.t

 - module: AppState::Ext::Documents
   constructor: new
   test-programs:
    - t/320-Documents.t

 - module: AppState::Ext::ConfigFile
   constructor: new
   test-programs:
    - t/350-ConfigFile.t

 - module: AppState::Plugins::Feature::ConfigManager
   constructor: new
   test-programs:
    - t/390-ConfigManager.t

 - module: AppState::Plugins::Feature::Process
   constructor: new
   test-programs:
    - t/560-Process.t

 - module: AppState::NodeTree::NodeGlobal
   constructor: instance
   test-programs:
    - t/700-NodeGlobal.t

 - module: AppState::NodeTree::NodeDOM
   constructor: new
   test-programs:
#    - t/700-NodeGlobal.t
    - t/701-NodeDOM.t

 - module: AppState::NodeTree::NodeRoot
   constructor: new
   test-programs:
#    - t/700-NodeGlobal.t
    - t/702-NodeRoot.t

 - module: AppState::NodeTree::NodeText
   constructor: new
   test-programs:
#    - t/700-NodeGlobal.t
    - t/703-NodeText.t

 - module: AppState::NodeTree::NodeAttr
   constructor: new
   test-programs:
#    - t/700-NodeGlobal.t
    - t/704-NodeAttr.t

 - module: AppState::NodeTree::Node
   constructor: new
   test-programs:
#    - t/700-NodeGlobal.t
    - t/705-Node.t

 - module: AppState::Plugins::Feature::NodeTree
   constructor: new
   test-programs:
#    - t/700-NodeGlobal.t
    - t/750-NodeTree.t
    - t/751-NodeTree.t
    - t/752-NodeTree.t

#-------------------------------------------------------------------------------
#
Manifest:

#-------------------------------------------------------------------------------
# Git info
#
Git:
 github:
  account: MARTIMM
 git-ignore-list:
  - '.*'

  - 'MYMETA.*'
  - '_build/'
  - 'blib/'
  - 'Build'

  - '*.LOG'
  - '*.tmp'
  - 'pm_to_blib'

  - 'Old/'
  - 'Bugs-Todo'
  - 'Changes-*'
  - 'Tests/*'

  - 'Distribution-Tests/'

#-------------------------------------------------------------------------------
# CPAN info
#
Cpan:
 account: MARTIMM

#-------------------------------------------------------------------------------
# Installation: Generated
# Dependencies: Generated
# Copyright: Generated
# License: Generated
#
Readme:

 body: |
  Inventing the wheel again..... Its purpose is to group a lot of programs
  nessessities into one set of modules. In the CPAN are modules for accessing
  configuration parameters, write log files and so on. All using different class
  names and some having more options, others less. Now, I wanted this all under
  one hood named AppState or Application state. Some things can be solved using
  existing modules using an adapter pattern others needed to be created anew.

  Modules
    AppState			Portal to other modules
      $configObject = getConfig;
      $logObject = getLog;
      $processObject = getProcess;
      cleanup;

    AppState::Config		Configuration handling  
      $keys = searchValue( $path, $regex);
      $keys = getKeys($path);

      Output types
	Yaml
	Storable
	MongoDB
	dbm see: http://docstore.mik.ua/orelly/perl/cookbook/ch11_15.htm

    AppState::Log		Logging
      Log levels are bit masks each for specific catagories. Keep
      first 16 bits reserved for AppState. Cannot be checked however.
    AppState::Log::Mask		Log mask defs

    AppState::Process		Daemon, fork, process tables etc

    AppState::CommandLine	Options and arguments, CGI

    AppState::Language		Language, Unicode, i18n, i10n


