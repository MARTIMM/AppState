#-------------------------------------------------------------------------------
# Documentation
#

=head1 NAME

AppState::Log - Module to do message logging and severity status handling

=head1 SYNOPSIS

  use AppState;
  use AppState::Ext::Meta_Constants;

  def_sts( 'C_MY_ERROR1', 'M_ERROR', 'My first error at %s %s');

  my $app = AppState->instance;
  $app->initialize( config_dir => 'MyProjectDir', check_directories => 1);

  my $log = $app->get_app_object('Log');
  $log->show_on_error(0);
  $log->add_tag('MPR');
  $log->write_start_message(0);
  $log->start_logging;
  $log->log_level($self->M_TRACE);

  # Log message with predefined code
  # Result something like 'Trace: 32, Log-pod.pl'
  #
  $log->log( $log->C_LOG_TRACE, [__LINE__ . ', ' . __FILE__]);

  # Log message with our own code
  # Result something like 'My first error at 32, MyProject.pl'
  #
  $log->log( $log->C_MY_ERROR1, [ __LINE__, __FILE__]);

=head1 DESCRIPTION

As assumed from the title above this module does not only handle logging but
also provides a way to handle those messages by storing the error in a status
object which can be checked later. Also the error can be send to clients who has
subscribed for it. The core method is write_log(). The rest is just controlling
the Log module. The module used to write log entries is Log::Log4perl.

There are three root loggers. These are for logging to file, email and for
stderr output. Their catagories are 'A_File', 'A_Email' and 'A_Stderr'  defined
by constants $log->ROOT_FILE and $log->ROOT_STDERR resp. The
logger to write to the logfile can be controlled by do_append_log(),
do_flush_log(), log_file(), log_file_size() and nbr_log_files().

To prevent log messages which get too long because of long module names, 3
letter tags are used for each module and can be set using add_tag(). The default
will be '---' so it is nessesary to use that function before writing a log
entry. When a stack is dumped however, modulenames are used. The log module
will have '=LG' as its tag.

An example of the logfile is shown here;

  ------------------------------------------------------------------------------
  Logging format can be one of the following 3 possibilities;
  1) date
  2) time severity_code tag line_number message
  3) msec severity_code tag line_number message

  Milliseconds are shown when date and time are not changing between log
  entriess

  Severity code is a 2 letter code. First is I, W, E, T, D and F for info,
  warning, error, trace, debug or fatal respectively. The second letter is
  s and f for success or failure respectively.

  Uppercase letters s and f mean that the log entry would be forced while
  otherwise the setting of loglevel would prevent it.

  A tag is a 3 letter code representing the logging module. This must be
  set by the module by calling add_tag(). The tag is followed by a four
  digit line number.
  ------------------------------------------------------------------------------

  ----------
  2014-08-10
  ----------
  14:09:06 IS =LG 0537 LOGINIT - Logger initialized
       980 IS =LG 0448 LOGSTARTED - Logging started. Log level set to 'ERROR'. Starting new log
       980 IS =LG 0164 LLVLCHANGED - Log level changed from 'ERROR' into 'TRACE'
       981 Is =LG 1027 TAGADDED - Tag 'MXT' added for module 'main'
       000 Is =LG 1027 TAGADDED - Tag '=CL' added for module 'AppState::Plugins::Feature::CommandLine'
       000 Is =PM 0395 PLGCREATED - Object CommandLine created
  14:09:07 Is =CL 0092 OPTCHANGED - Option processing changed: bundling
       003 Is =CL 0245 OPTPROCESSED - Options processed
       004 Is =PM 0402 PLGRETRVED - Object CommandLine retrieved
       004 Is =PM 0402 PLGRETRVED - Object ConfigManager retrieved

The top legend can be hidden by using write_start_message(0). Besides tags for
the log module(=LG), there are also the entries from the
AppState::Plugins::Feature::PluginManager (=PM) and the
AppState::Plugins::Feature::CommandLine(=CL) modules shown in the above log. By
the way, wrapping was turned off here.

When the status of the error is higher than warning a stack dump is also shown.
In the example below the information is minimized to only the modulename and the
line number where the log call was issued.

  14:09:07 Ef 320 0036 NOHASHREF - Config root nor config hook into data is a
              hash reference. Returned an empty hash reference, perhaps no
              document selected
               Stack dump;
               0036 main
               0234 Test::Builder
               0239 Test::Builder
               0239 Test::Builder
               0747 Test::More
               0037 main

Exceptions from other parts in the program are intercepted to be able to log it
at a fatal level and die after that event.

=head1 METHODS

=head2 do_append_log($bool)

Method to set 'append to log'. Can be changed before the logfile is opened.
After the log is opened, it has no meaning. Without argument it returns the
current setting. The default is 1.

=head2 do_flush_log($bool)

Method to set 'flushing to log'. Can be changed before the logfile is opened.
After the log is opened, it has no meaning. Without argument it returns the
current setting. The default is 0.

=head2 log_file($filename)

Method to set logfile name. Can be changed before the logfile is opened.
After the log is opened, it has no meaning. Without argument it returns the
current setting. The default will be the basename of the program with '.log'
extention and is located in directory Appstate->instance->config_dir(). See
L<AppState>.

=head2 log_file_size($size)

The maximum log file size is set by this method. When 0 or less than 0 it will
not be used and will grow until the filesystem fills up. It will also not be
used when appending was turned off.

=head2 nbr_log_files($max_nbr_logfiles) When 0 or less than 0 or when
appending was turned off this value will not be used.

Set the maximum number of logfiles. 

=head2 nbr_log_tags()

The number of tags set by using method add_tag().

=head2 get_log_tag($module_name)

Return the 3 letter tag for the given module name.

=head2 has_log_tag($module_name)

Check to see if a module has a tagname defined

=head2 get_tag_modules()

Get the registered modulenames which have a tag defined.

=head2 get_tag_names()

Get the registered tag names

Same purpose as log_level but is for logging to email error output. Default
is set to M_FATAL.

=head2 die_on_error($bool)

Control if the write_log() must end the program after handling the message with
an error status. Default is off. Returns the current value when no argument is
given.

=head2 die_on_fatal($bool)

Control if the write_log() must end the program after handling the message with
a fatal status. Default is on. Returns the current value when no argument is
given.

=head2 message_wrapping($bool)

Wrap messages in the logfile. The lines have a maximum of 80 characters and will
indent on the second line. Default is 1. When zero, the messages to STDERR followed
by a stack dump will always be wrapped.

=head2 write_start_message($bool)

Control if a legend must be written at the start of the logfile. Default is 1.

=head2 clear_last_error()

Initialize to a successful state

=head2 is_last_success()

Test if status is successful

=head2 is_last_fail()

Test if status is a failure

=head2 is_last_forced()

Test if status is forced

=head2 get_last_message()

Get the message from the last saved state object

=head2 get_last_error()

Get the error from the last saved state object

=head2 get_last_severity()

Get the severity from the last saved state object

=head2 get_last_eventcode()

Get the eventcode from the last saved state object

=head2 get_sender_line_no()

Get the line number from the last saved state object

=head2 get_sender_file()

Get the filename from the last saved state object

=head2 get_sender_package()

Get the package name from the last saved state object

=head2 file_log_level($log_level)

Set the log level. The levels are like those used by Log::Log4perl and
are defined in AppState::Ext::Constants. These are methods and named
M_TRACE, M_DEBUG, M_INFO, M_WARN, M_WARNING, M_ERROR and M_FATAL in increasing
order. M_WARN and M_WARNING return the same codes. Every log entry is compared
to this log level and errors having lower status will not get logged. There
are some more rules but see write_log() for more information. Default is set to
M_INFO.

Instead of a log level value, one can give a hash with two keys. One for the
level and one for the package. This is used to set a level on behalf of another 
module. It is nessesary that the module must be prefixed with the root loggers
name. Example is $log->ROOT_FILE . "::Foo::Bar". To change the root
loggers level one can use the string 'root' instead of $log->ROOT_FILE.

Example;

  # Set root logger logging level to fatal only
  #
  $log->file_log_level( { level => $log->M_FATAL, package => 'root'});

  # Set current module logging level to info so for this module all messages
  # are shown except trace and debug.
  #
  $log->file_log_level($log->M_INFO);


=head2 stderr_log_level($log_level)

Same purpose as log_level but is for logging to standard error output. Default
level for root logger is set to M_FATAL.

=head2 email_log_level($log_level)

Same purpose as log_level but is for logging to standard error output. Default
level for root logger is set to M_FATAL.

=head2 plugin_cleanup()

Cleaning up the module by stopping log output and deleting subscribers.

=head2 start_logging()

Start the log. From this moment the write_log will write to the log depending
on the log level and if message is forced to be written. Methods do_append_log()
and do_flush_log() must be called for changes before calling this method.

=head2 stop_logging()

Stop writing to the log.

=head2 wlog( $error, $message_values, $call_level)

Wlog() will process the error as a dualvar created by Scalar::Util::dualvar. It
must hold a status code and a message. The message is a sprintf() string in
which variables, whenever there are any, are substituted from $message_values.
$message_values is an array reference. $call_level is used to denote the proper
caller for the message. The default for $call_level is 0.

The module AppState::Ext::Meta_Constants has a function def_sts() to help
creating the dualvar status values. The module AppState::Ext::Constants has a
set of predefined codes defined.

The function returns undef or when error is processed due to log level and what
have you, it returns a status object of type AppState::Ext::Status. In many
cases it might be stored in the Log module and can be queried later.

An example use is shown below. There are two status messages, one trace status
and a fatal status. By default, fatal status messages will end the program after
logging the message and showing the stack on stderr.

  package MyMod
  {
    use Moose;
    extends qw(AppState::Ext::Constants);
    use AppState;
    use AppState::Ext::Meta_Constants;

    def_sts( 'C_FILEOPENED', 'M_TRACE', 'File %s opened');
    def_sts( 'C_PROGRAMFAILURE', 'M_FATAL', 'Cannot open file %s, %s');

    sub open_file
    {
      my( $self, $filename) = @_;

      my $log = AppState->instance->get_app_object('Log');
      open my $fh, '<', $filename
         or $log->log( $self->C_PROGRAMFAILURE, [ $filename, $!]);
      $log->log( $self->C_FILEOPENED, [$filename]);
    }
  };

  package main
  {
    use MyMod;
    use AppState;

    my $app = AppState->instance;
    $app->initialize(check_directories =>1);

    my $log = $app->get_app_object('Log');
    $log->start_logging;
    $log->log_level($app->M_TRACE);

    $mm = MyMod->new;
    $mm->open_file('non_existent_file.txt');

    $app->cleanup;
  };

Output on stderr after the program was killed is something like;

  Ff --- 0016 PROGRAMFAILURE - Cannot open file non_existent_file.txt, No such
              file or directory
               Stack dump;
               0016 MyMod
               0035 main

=head2 write_log( $messages, $error, $call_level)

Write messages to the log

=head2 get_log_lvl($logger_name)

Get the level set previously for a logger. When not set it searches a level
higher until up to the root logger.

=head2 add_tag( $tag, $call_level, $package)

Add a 3 letter tag. By default the call_level is 0, that is the callers package
will be used to link to the tag. It is possible to enter another package name.

=head1 PRIVATE METHODS

This is documentation for me only! Everything can change at any point in the
future and is only mentioned here to prevent users overwriting the methods by
accident.

=head2 _log_tag()

Return the hash reference of the module tags table. Readonly. The method
add_tag() will use _set_log_tag() to modify the hash. The keys in the hash are
the names of the modules and their values are the 3 letter tag used in the log
output. The first entry is that of the log module;
C<'AppState::Plugins::Feature::Log' => '=LG'>

=head2 _set_log_tag( $module => $tag, ...)

Set the tag(value) of a module(key).

=head2 $_test_levels

Sub to test the level for the *_log_level() methods

=head2 _log_levels()

A readonly hash ref to store logger levels. The keys are the modulenames
prefixed with the rootpath of one of the root loggers. The values are the levels
found in AppState::Ext::Constants. Examples are $self->M_INFO and $self->M_FATAL

=head2 _set_log_lvl( $logger_name => $log_level, ...)

Set new logging level for logger.

=head2 _get_log_lvl($logger_name)

Get the log level for the logger

=head2 _logging_is_forced()

Check to see if error has a forced bit enabled.

=head2 _force_log()

Force logging of message independend of log_level

=head2 _normal_log()

Logging is normal in respect to log_level. That is, not forced.

=head2 _is_logging()

Check to see if logging is started or not.

=head2 _logging_on()

Turn logging on. Done in start_logging().

=head2 _logging_off()

Turn logging off. Done in stop_logging.

=head2 _logger_initialized()

Check if logger is initialized.

=head2 _set_logger_initialized()

Method start_logging() will somewhere turn C<logger_initialized> on.

=head2 _logger_layouts()

Get the logger layouts structure as a hash reference. There are 4 logger layouts
defined and the purpose and keys are shown in a table.

  Key           Purpose              Layout Pattern

  log.startmsg  Show start message   '%m%n'
  log.date      Show date            '%n----------%n%d{yyyy-MM-dd}%n----------%n'
  log.time      Show time and status '%d{HH:mm:ss} %p{1}%m{chomp}%n'
  log.millisec  Show msec and status '     %d{SSS} %p{1}%m{chomp}%n'
  log.stderr    Show log to stderr   '%p{1}%m{chomp}%n'

The message %m will always be <tag> <line number> <status codes> <log message>
except for the start message which is kind of an explanation or legend. See
the example log output above.

=head2 _set_layout($logger_layout_name => $Log_Log4perl_layout)

Set the layout using one of the keys shown above. The layout is created by

  Log::Log4perl::Layout::PatternLayout->new($pattern);

using a pattern also shown above in the table.

=head2 _get_layout($logger_layout_name)

Get the layout from the layout hash.

=head2 _previousMsg($msg)

Save previous message. This is used to prevent repetion of the same message.
When it repeats it shows '--[Message repeated]--'.

=head2 _previousTime($time)

Save previous time. When the previous time is the same as the current time, the
log message will be prefixed with milliseconds. Otherwise it will show
hours:minutes:seconds.

=head2 _previousDate($date)

Save previous date. When previous date is not the same as the current date it
shows the start message followed by the date. Then it shows the time and message.

=head2 _previousMsgEq($bool)

When previous message has repeated itself twice, this is set to true. When set
no log will be done.

=head2 _lastError($status_object)

Status object (AppState::Ext::Status) is saved here so the log object can be
queried for its values. See also clear_last_error, is_last_success,
is_last_fail, is_last_forced, get_last_message, get_last_error,
get_last_severity, get_last_eventcode, get_sender_line_no, get_sender_file,
get_sender_package

=head2 BUILD

Moose build function to initialize after creating attributes.

=head2 DEMOLISH

Cleanup before deleting the object

=head2 _make_logger_objects()

Create the Log::Log4perl loggers, appenders and their pattern layouts.

=head2 _create_file_root_logger()

=head2 _create_stderr_root_logger()

=head2 _create_email_root_logger()

=head2 _log_data_line()

Write the date. When a start message is needed this will be written first. It
uses the pattern log.startmsg, if needed, and the pattern log.date.

=head2 _log_time_line( $msg, $log_attr)

Write the time and message depending on log level and if message is forced
to be written.

=head2 _log_message( $msg, $forced)

Write message depending on log level and if message is forced to be written.

=head2 _get_log_level_name($mask)

Convert the status from the mask into the name used by Log::Log4perl

=head2 _get_log_level_function_name()

Find Log::Log4perl log level function name from severity code in status object

=head2 _get_start_msg()

Get the start message/legend

=head2 _create_message

Create the final string send to the logger.

=head2 _get_stack($call_level)

Return stack starting at call_level which is by default 0.


=head1 STATUS CODES

Many status codes are forced messages which means that when the error level is
lower than the log_level(), they will still be processed. It is done because
one can always see what the logger processes when logging is turned on. Fatal
error status will kill the program unless die_on_fatal(0) is called first.

  Status name         Severity     Note
  
  C_LOG_LOGINIT       M_TRACE      Log initialized
  C_LOG_LOGSTARTED    M_TRACE      Logging started
  C_LOG_LOGSTOPPED    M_TRACE      Logging stopped
  C_LOG_TAGLBLINUSE   M_FATAL      Tag already in use by other module.
  C_LOG_TAGALRDYSET   M_FATAL      Calling module has already a tag set.
  C_LOG_LOGGERLVL     M_TRACE      Level for some logger changed
  C_LOG_TAGADDED      M_INFO       Tag added for calling module
  C_LOG_NOERRCODE     M_F_ERROR    Error does not have a event or severity code
  C_LOG_NOMSG         M_F_ERROR    No message or empty message in error
  C_LOG_LOGALRINIT    M_F_WARNING  Log already initialized. Happens with append,
                                   flush and hide message legend changes.
  C_LOG_ILLLEVELCD    M_F_ERROR    Illegal logger level


=head1 PROGRAM CODES

  Code                Value        Note
  
  ROOT_FILE           A_File       The name used to set/get the root logger for
                                   file logging from Log::Log4perl.
  ROOT_STDERR         A_Stderr     The name used to set/get the root logger from
                                   Log::Log4perl.to send messages to stderr.
  ROOT_EMAIL          A_Email      The name used to set/get the root logger for
                                   email logging from Log::Log4perl.

=head1 SEE ALSO


=head1 AUTHOR

Marcel Timmerman, E<lt>mt1957@gmail.comE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2013 by Marcel Timmerman

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.14.3 or,
at your option, any later version of Perl 5 you may have available.


=cut
