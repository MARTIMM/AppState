#-------------------------------------------------------------------------------
# Documentation
#

=head1 NAME

AppState::Log - Module to do message logging and severity status handling

=head1 SYNOPSIS

  use AppState;
  use AppState::Ext::Meta_Constants;

  def_sts( 'C_MY_ERROR1', 'M_ERROR', 'My first error: %s');

  my $config_dir = 't/Log';
  my $app = AppState->instance;
  $app->initialize( config_dir => $config_dir
                , use_work_dir => 0
                , use_temp_dir => 0
                );
  $app->check_directories;

  my $log = $app->get_app_object('Log');
  $log->show_on_error(0);
  $log->add_tag('SYN');
  $log->dont_log_start_message;
  $log->start_logging;
  $log->log_level($self->M_TRACE);

  # Log message with predefined code
  # Result something like 'Trace: 32, Log-pod.pl'
  #
  $log->log( $log->C_LOG_TRACE, [__LINE__ . ', ' . __FILE__]);

  # Log message with our own code
  # Result something like 'My first error: 32, Log-pod.pl'
  #
  $log->log( $log->C_MY_ERROR1, [__LINE__ . ', ' . __FILE__]);

=head1 DESCRIPTION

As assumed from the title above this module does not only handle logging but
also provides a way to handle those messages by storing the error in a status
object which can be checked later. Also the error can be send to clients who has
subscribed for it. The core method is write_log(). The rest is just controlling
the Log module. The module used to write log entries is Log::Log4perl.

To prevent log messages which get too long because of long module names, 3
letter tags are used for each module and can be set using add_tag(). The default
will be '---' so it is nessesary to use that function before writing a log
entry. When a stack is dumped however, modulenames are used. The log module
will have '=LG' as its tag.

An example of the logfile is shown here;

  --------------------------------------------------------------------------------
  Logging format can be one of the following 3 possibilities;
  1) date
  2) time tag line_number severity_code wrapped_message
  3) msec tag line_number severity_code wrapped_message

  Milliseconds are shown when date and time are not changing between logs

  A tag is a 3 letter code representing the logging module. This is set when
  calling add_tag().

  Severity code is a 2 letter code.
  First is i, w, e, t, d and f for info, warning, error, trace, debug or fatal
  respectively. The second letter is s and f for success or failure respectively.

  Uppercase letters mean that the log will be forced while otherwise the setting
  of loglevel would prevent it.
  --------------------------------------------------------------------------------

  ----------
  2014-08-10
  ----------
  14:09:06 =LG 0537 IS Logger initialized
       980 =LG 0448 IS Logging started. Log level set to 'ERROR'. Starting new log
       980 =LG 0164 IS Log level changed from 'ERROR' into 'TRACE'
       981 =LG 1027 is Tag 'MXT' added for module 'main'
       000 =LG 1027 is Tag '=CL' added for module
	      'AppState::Plugins::Feature::CommandLine'
       000 =PM 0395 is Object CommandLine created
  14:09:07 =CL 0092 is Option processing changed: bundling
       003 =CL 0245 is Options processed
       004 =PM 0402 is Object CommandLine retrieved
       004 =PM 0402 is Object ConfigManager retrieved

The top legend can be hidden by using write_start_message(0). Besides tags for
the log module, there are also the entries from the
AppState::Plugins::Feature::PluginManager (=PM) and the
AppState::Plugins::Feature::CommandLine(=CL) modules.

=head1 METHODS

=head2 do_append_log($bool)

Method to set 'append to log'. Can be changed before the logfile is opened.
After the log is opened, it has no meaning. Without argument it returns the
current setting. The default is 1.

=head2 do_flush_log($bool)

Method to set 'flushing to log'. Can be changed before the logfile is opened.
After the log is opened, it has no meaning. Without argument it returns the
current setting. The default is 0.

=head2 log_file($filename)

Method to set logfile name. Can be changed before the logfile is opened.
After the log is opened, it has no meaning. Without argument it returns the
current setting. The default will be the basename of the program with '.log'
extention and is located in directory Appstate->instance->config_dir(). See
L<AppState>.

=head2 nbr_log_tags

The number of tags set in the logging module.

=head2 get_log_tag($module_name)

Return the module tag string for the given module name.

=head2 has_log_tag($module_name)

Check to see if module has a tagname defined

=head2 get_tag_modules

Get the registered modulenames which have a tag defined.

=head2 get_tag_names

Get the registered tag names

=head2 log_level

Set the log level. The levels are like those used by Log::Log4perl and
are defined in AppState::Ext::Constants. These are methods and named
M_TRACE, M_DEBUG, M_INFO, M_WARN, M_WARNING, M_ERROR and M_FATAL in increasing
order. M_WARN and M_WARNING return the same codes. Every log entry is compared
to this log level and errors having lower status will not get logged. There
are some more rules but see write_log() for more information.


=head1 PRIVATE METHODS

This is documentation for me only! Everything can change at any point in the
future and is only mentioned here to prevent users overwriting the methods by
accident.

=head2 _log_tag

Return the hash reference of the module tags table.

=head2 _set_log_tag( $module_name => $tag_name)

Method to set the modules tagname.


=head1 STATUS CODES

Many status codes are forced messages which means that when the error level is
lower than the log_level(), they will still be processed. It is done because
one can always see what the logger processes when logging is turned on. Fatal
error status will kill the program unless die_on_fatal(0) is called first.

  C_LOG_APPENDON      M_F_INFO     Appending to log turned on
  C_LOG_APPENDOFF     M_F_INFO     Appending to log turned off
  C_LOG_AUTOFLUSHON   M_F_INFO     Flushing to log turned on
  C_LOG_AUTOFLUSHOFF  M_F_INFO     Flushing to log turned off
  C_LOG_LOGINIT       M_F_INFO     Log initialized
  C_LOG_LOGSTARTED    M_F_INFO     Logging started
  C_LOG_LOGSTOPPED    M_F_INFO     Logging stopprd
  C_LOG_TAGLBLINUSE   M_FATAL      Tag already in use.by other module
  C_LOG_TAGALRDYSET   M_FATAL      Calling module has already a tag set.
  C_LOG_LLVLCHANGED   M_F_INFO     Log level changed
  C_LOG_TAGADDED      M_F_INFO     Tag added for calling module
  C_LOG_NOERRCODE     M_F_ERROR    Error does not have a event or severity code
  C_LOG_NOMSG         M_F_ERROR    No message or empty message in error
  C_LOG_LOGALRINIT    M_F_WARNING  Log already initialized. Happens with append
                                   or flush changes.

=head1 PROGRAM CODES

  C_LOG_LOGGERNAME                 The name used to set/get the loggername from
                                   Log::Log4perl.

=head1 SEE ALSO


=head1 AUTHOR

Marcel Timmerman, E<lt>mt1957@gmail.comE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2013 by Marcel Timmerman

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.14.3 or,
at your option, any later version of Perl 5 you may have available.


=cut
